---
title: "Class 9: Halloween Candy Project"
author: Nancy Leon Rivera pid A12925462
format: pdf
---

## Background
Today we are delving into an analysis of Halloween candy data using ggplot, dplyr, basic stats, correlations analysis, and PCA

##Import the data

```{r import}
candy <- read.csv("candy-data.txt", row.names = 1)
head(candy)
```

>Q1. How many candies types are in this dataset?

```{r}
#nrow is our friend
nrow(candy)
```

>Q2. How many fruity candy types are in the dataset?

```{r}
#access data and call what you are looking for
#candy$fruity
#want total
sum(candy$fruity)
```

>Q3. How many chochlate candy types are in the dataset?

```{r}
sum(candy$chocolate)
```

##What is your favorite candy?

```{r}
candy["Nerds","winpercent"]
```

```{r}
candy["Nerds",]$winpercent
#Can do candy["Nerds",]$c(winpercent, sugarpercent) to return multiple items

```

```{r}
#| message: false
library(dplyr)
```


We can also use the `filter()` and `select()` function from **deplyr**.

```{r}
candy|>
  filter(rownames(candy)=="Nerds") |>
  #Can select and return mutiple items
  select(winpercent, sugarpercent)
```

```{r}
candy|>
  filter(rownames(candy)=="Twix") |>
  select(winpercent, sugarpercent)
```


```{r}
candy|>
  filter(rownames(candy)=="Kit Kat") |>
  select(winpercent, sugarpercent)
```

A useful function for a quick look at a new dataset is found in the **skimr** package:
```{r}
##library(skimr) or
skimr::skim(candy)

#based on the output row winpercent dominates the data and therefore, I must skim every dataset I use to ensure there is fair data and all on the same scale. 
```


>Q6.  Is there any variable/column that looks to be on a different scale to the majority of the other columns in the dataset?

Yes, the 10th column `winpercent` is on a different "scale" or range than all the others. 
**N.B**We will beed to scale this data before analysis like PCA for example to avoid this one variable dominating our analysis. 

>Q7. What do you think a zero and one represent for the candy$chocolate column?

 That the candy has no chocolate 
 
>Q8. Plot a histogram of winpercent values using R and ggplot.

```{r}
hist(candy$winpercent)
```

```{r}
library(ggplot2)
ggplot(candy)+
  aes(winpercent) +
  geom_histogram(bins=10, fill="blue")
```


>Q9. Is the distribution of winpercent values symmetrical?
No, not symetrical 
>Q10. Is the center of the distribution above or below 50%?
From the histogram it looks to be below the 50% mark

```{r}
summary(candy$winpercent)
```


>Q11. On average is chocolate candy higher or lower ranked than fruit candy?


Step1. Extract/Find chocolate candy rows in the data set.
Step2. Get their winpercent values
Step3. Calculate their mean winpercent values. 

Repeat for fruity Candy 
Step4. Extract/Find fruity candy rows in teh dataset.
Step5. Get their winpercent values
Step6. Calculate their mean winpercent values.

Step7. Compare the mean choclate winpercent to mean fruity winpercent and see which one is larger.

1.Find choclate candy
```{r}
choc.inds <- candy$chocolate==1
choc.candy <- candy[choc.inds, ]

```

2.get their winpercent
```{r}
choc.win <- choc.candy$winpercent

```


3. calculate their mean
```{r}
mean(choc.win)
```

4.Find fruity candy
```{r}
fruit.inds <- candy$fruity==1
#or can do as.logical(candy$fruity)
fruit.candy <- candy[fruit.inds, ]

```

5.get their winpercent
```{r}
fruit.win <- fruit.candy$winpercent

```


6. calculate their mean
```{r}
mean(fruit.win)
```


>Q12. Is this difference statistically significant?

Let's use student T-test 


```{r}
t.test(choc.win, fruit.win)
#this is statistically significant 
```


##3. Overall Candy Rankings

>Q13. What are the five least liked candy types in this set?

```{r}
#only sorts the input and not helpful  
#sort(candy$winpercent)
x <- c(10, 1, 100)
order(x)
```
So I can use the output of `order(winpercent)` to re-arrange or order my whole dataset by winpercent.

```{r}
ord.inds <- order(candy$winpercent)
head(candy[order(candy$winpercent),], n=5)
#or candy %>% arrange(winpercent) %>% head(5)
```

```{r}
candy|>
  arrange(winpercent) |>
  head()
```


>Q14. What are the top 5 all time favorite candy types out of this set?

```{r}
candy|>
  arrange(-winpercent) |>
  head(5)
```

>Q15. Make a first barplot of candy ranking based on winpercent values.

```{r}
library(ggplot2)

ggplot(candy) + 
aes(winpercent, rownames(candy)) +
  geom_col()
```


We can make this plot better by rearranging (ordeing) the y-axis by winpercent so the highest scoring candy is at the top and lowest at bottom.
```{r}
library(ggplot2)
ggplot(candy) + 
aes(x=winpercent, y=reorder(rownames(candy), winpercent)) +
  geom_col()+
  ylab("") +
  xlab("Winning Percent") 
```

```{r}
ggsave("my_plot.png", height =12, width=6)

```

![Fig X. SOme big plot](my_plot.png)

>Q. Color your bars by "chocolate"

```{r}
ggplot(candy) + 
aes(x=winpercent, y=reorder(rownames(candy), winpercent), fill=chocolate)+
  geom_col()+
  ylab("") +
  xlab("Winning Percent")
```


I want to color choclate and fruity candy a specified color. 
To do this we need to define our own custom color vector that has the exact color mappings we want. 

```{r}
mycols <- rep("grey", nrow(candy))
ggplot(candy) + 
aes(x=winpercent, y=reorder(rownames(candy), winpercent))+
  geom_col(fill= mycols)+
  ylab("") +
  xlab("Winning Percent")
```
```{r}
mycols <- rep("black", nrow(candy))
mycols[candy$chocolate==1] <- "chocolate" 
mycols[candy$bar==1] <- "brown" 
mycols[candy$fruity==1] <- "blue" 
mycols
```
```{r}
ggplot(candy) + 
aes(x=winpercent, 
    y=reorder(rownames(candy), winpercent))+
  #we put it in geom code becuase its not comming from the dataset
  geom_col(fill=mycols) + 
  ylab("") +
  xlab("Winning Percent")
```




```{r}
ggsave("my_color_plot.png", height=12, width=6)
```

![](my_color_plot.png)



> Q17. What is the worst ranked chocolate candy?

sixlets

>Q18. What is the best ranked fruity candy?

starbursts

##4 Taking a look at pricepercent

Plot of winpercent vs pricepercent

```{r}
ggplot(candy) + 
aes(x=winpercent, 
    y=pricepercent, label=row.names(candy))+
  geom_point(col=mycols) +
  geom_text(col=mycols) +
  theme_bw()
```


To avoid the common problem of label ir text overlapping/over-plotting we can use the **ggrepel** package like so:

```{r}
library(ggrepel)

ggplot(candy) + 
aes(x=winpercent, 
    y=pricepercent, label=row.names(candy))+
  geom_point(col=mycols) +
  geom_text_repel(col=mycols) +
  theme_bw()
```


We can control the amount of labels visible by setting different `max.overlaps` values:

```{r}
#Change pink to be red for fruity candy
mycols[candy$fruity==1] <- "red"

ggplot(candy) + 
aes(x=winpercent, 
    y=pricepercent, label=row.names(candy))+
  geom_point(col=mycols) +
  geom_text_repel(col=mycols, max.overlaps = 8) +
  theme_bw()
```
>Q19. Which candy type is the highest ranked in terms of winpercent for the least money - i.e. offers the most bang for your buck?

Reese's miniatures 

>Q20. What are the top 5 most expensive candy types in the dataset and of these which is the least popular?

Top 5 most expensive: Twix, Nestle smarties, Nik n Lip, Ring pop, Mr. Good bar


##5 Exploring the correlation strucuture 

The main function for correlation analysis in base R is called `cor()`

```{r}
cij <- cor(candy)
head(cij)
```


```{r}
library(corrplot)
corrplot(cij)
```

##6 Principal COmponent Analysis (PCA)

We can use our old friend `prcomp()` function with `scale=T`:

```{r}
pca <- prcomp(candy, scale=T)
pca
```
Let's make our main results figures, first our score plot (PC plot)

```{r}
#attributes(pca)
#pca$x

ggplot(pca$x) +
  aes(PC1, PC2, label=row.names(candy))+
  geom_point(col=mycols) +
  geom_text_repel(col=mycols, max.overlaps = 8)
```

Let's look at how the original variables contribute to our new PC's - this is often called the valiable "loadings"

```{r}
ggplot(pca$rotation) +
  aes(PC1,reorder(rownames(pca$rotation), PC1)) +
  geom_col()
```






