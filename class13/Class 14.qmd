---
title: "Class 14 Lab"
author: "Nancy Leon-Rivera PID A12925462"
format: pdf
toc: true
---


# Background

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703
The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1. Their results and others indicate that HOXA1 is required for lung fibroblast and HeLa cell cycle progression. In particular their analysis show that "loss of HOXA1 results in significant expression level changes in thousands of individual transcripts, along with isoform switching events in key regulators of the cell cycle". For our session we have used their Sailfish gene-level estimated counts and hence are restricted to protein-coding genes only.



# Data Import 

Reading in the counts and the metadata


```{r}
counts <- read.csv("GSE37704_featurecounts.csv", row.names = 1)
metadata <- read.csv("GSE37704_metadata.csv")
```


## Tidy and verify data

>Q. How many genes are in this dataset?

```{r}
head(metadata)
nrow(counts)
#19808
```


>Q. How many control and knowndown experiemetns are there?

```{r}
head(metadata)
#3 control and 3 knockdown
```

>Q. Does the `metadata`match the `countdata`

```{r}
head(counts)
#Need to get rid of length since we only need 3 ctrl and 3 kd
```
```{r}
metadata$id
```
```{r}
newcounts <- counts[,-1]
dim(newcounts)

```

```{r}
colnames(newcounts) ==metadata$id
```

## Remove zero count genes


```{r}
head(newcounts)
#newcounts==0
```
```{r}
##Removing all zero from data file
to.keep <- rowSums(newcounts) !=0
countData <- newcounts[to.keep,]
```


# PCA quality control

We can use `prcomp()` function. 

```{r}
pc <- prcomp(t(countData), scale = T)
summary(pc)
```
Color by "control" (blue) and kd (red)
```{r}
metadata$condition
mycols <- c(rep("blue", 3), rep("red", 3))
mycols
```


```{r}
library(ggplot2)
ggplot(pc$x) +
  aes(PC1, PC2) +
  geom_point(col=mycols)

```

>Q. How many genes do we have left after filtering?

```{r}
nrow(countData)
```


# DESeq analysis 

```{r}
library(DESeq2)
head(countData)
```


## Setup the DESeq input objects

```{r}
dds <- DESeqDataSetFromMatrix(countData= countData, 
                              colData = metadata,
                              design = ~condition)
```


## Run DESeq

```{r}
dds <- DESeq(dds)
```


## Extract results

```{r}
res <- results(dds)
```

```{r}
head(res)
```

# Volcano plot 
A plot of log2 fold change vs -log of adjusted p-value with custom colors

```{r}
mycols <- rep("grey", nrow(res))
mycols[res$log2FoldChange >= +2] <- "blue"
mycols[res$log2FoldChange <=-2] <- "blue"
mycols[res$padj >= 0.005] <- "grey"

```


```{r}
ggplot(res) +
  aes(log2FoldChange, -log(padj)) +
  geom_point(col=mycols) +
  geom_vline(xintercept = c(-2,2), col="red")
  geom_hline(yintercept = -log(0.005), col="blue")
```



# Add gene annotations
We want to add gene SYMBOL and ENTREZID values to our results object.

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```


```{r}
columns(org.Hs.eg.db)
```


```{r}
res$symbol <- mapIds(org.Hs.eg.db, 
             keys=rownames(res),
             keytype = "ENSEMBL",
             column = "SYMBOL")

res$entrez <- mapIds(org.Hs.eg.db, 
             keys=rownames(res),
             keytype = "ENSEMBL",
             column = "ENTREZID")
```

```{r}
head(res)
```


# Save results 

```{r}
write.csv(res, file="myresultsclass14.csv")
```


# Pathway analysis 

```{r}
#|mmessage: false
library(gage)
library(gageData)
library(pathview)


```



## KEGG


```{r}
data("kegg.sets.hs")
```

```{r}
head(kegg.sets.hs, 1)
```
Make an imput vector for `gage()` called `foldchanges` that has `names()` attribute set to ENTREZIDs
```{r}
foldchanges <- res$log2FoldChange
names(foldchanges) <- res$entrez
```

```{r}
keggres <- gage(foldchanges, gsets = kegg.sets.hs)

```

```{r}
attributes(keggres)
```

```{r}
head(keggres$less)
```

```{r}
pathview(foldchanges, pathway.id = "hsa04110")
```

![](hsa04110.pathview.png)

```{r}
pathview(foldchanges, pathway.id = "hsa03030")

```
![](hsa03030.pathview.png)


## GO & Gene Ontology

```{r}
data(go.sets.hs)
data(go.subs.hs)

#Focus just on GO Biological Process (BP)

gobpsets  = go.sets.hs[go.subs.hs$BP]
gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

```

```{r}
head(gobpres$less)
```

##Reactome

We can use reactome via R or via their fancy new website interface. The web interface wants a set of ENTREZ ID values for your genes of interest. Let's generate that. 

```{r}
inds <- abs(res$log2FoldChange) >=2 & res$padj <=0.05
top.genes <- res$entrez[inds]
```


```{r}
write.table(top.genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)

```








